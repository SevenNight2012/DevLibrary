apply plugin: 'maven'

println System.getenv("NEXUS_USERNAME")
println System.getenv("NEXUS_PASSWORD")

def getRepositoryUsername() {
    return System.getenv("NEXUS_USERNAME")
}

def getRepositoryPassword() {
    return System.getenv("NEXUS_PASSWORD")
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
def mavenRemote = System.getenv("MAVEN_REMOTE_URL")
def mavenLocal = System.getenv("MAVEN_LOCAL_URL")
def RELEASE_REPOSITORY_URL = mavenLocal
def SNAPSHOT_REPOSITORY_URL = mavenLocal

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: RELEASE_REPOSITORY_URL) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            // 发布到maven的相关信息
            pom.groupId = GROUP// 项目包名
            pom.artifactId = POM_ARTIFACT_ID// 库名
            pom.version = UPLOAD_VERSION_NAME// 版本号
        }
    }
}